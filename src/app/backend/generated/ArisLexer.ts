// Generated from src/antlr4/Aris.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ArisLexer extends Lexer {
	public static readonly ADD = 1;
	public static readonly COPY = 2;
	public static readonly MOVE = 3;
	public static readonly TO = 4;
	public static readonly INPUT = 5;
	public static readonly OUTPUT = 6;
	public static readonly LOOP = 7;
	public static readonly IFZERO = 8;
	public static readonly IFNOTZERO = 9;
	public static readonly IFPOS = 10;
	public static readonly IFNEG = 11;
	public static readonly CURLY_OPEN = 12;
	public static readonly CURLY_CLOSED = 13;
	public static readonly MEMORY_SLOT = 14;
	public static readonly MEMORY_SLOT_NUMBER = 15;
	public static readonly MEMORY_SLOT_NAME = 16;
	public static readonly NEWLINE = 17;
	public static readonly LINE_COMMENT = 18;
	public static readonly UNIDENTIFIED = 19;
	public static readonly WHITESPACE = 20;
	public static readonly ERROR_CHARACTER = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"ADD", "COPY", "MOVE", "TO", "INPUT", "OUTPUT", "LOOP", "IFZERO", "IFNOTZERO", 
		"IFPOS", "IFNEG", "CURLY_OPEN", "CURLY_CLOSED", "MEMORY_SLOT", "MEMORY_SLOT_NUMBER", 
		"MEMORY_SLOT_NAME", "NEWLINE", "LINE_COMMENT", "UNIDENTIFIED", "WHITESPACE", 
		"ERROR_CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'add'", "'copy'", "'move'", "'to'", "'input'", "'output'", 
		"'loop'", "'ifzero'", "'ifnotzero'", "'ifpos'", "'ifneg'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ADD", "COPY", "MOVE", "TO", "INPUT", "OUTPUT", "LOOP", "IFZERO", 
		"IFNOTZERO", "IFPOS", "IFNEG", "CURLY_OPEN", "CURLY_CLOSED", "MEMORY_SLOT", 
		"MEMORY_SLOT_NUMBER", "MEMORY_SLOT_NAME", "NEWLINE", "LINE_COMMENT", "UNIDENTIFIED", 
		"WHITESPACE", "ERROR_CHARACTER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ArisLexer._LITERAL_NAMES, ArisLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ArisLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ArisLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Aris.g4"; }

	// @Override
	public get ruleNames(): string[] { return ArisLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ArisLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ArisLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ArisLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\xA0\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x05\x0Ft\n\x0F\x03\x10" +
		"\x06\x10w\n\x10\r\x10\x0E\x10x\x03\x11\x06\x11|\n\x11\r\x11\x0E\x11}\x03" +
		"\x12\x05\x12\x81\n\x12\x03\x12\x03\x12\x06\x12\x85\n\x12\r\x12\x0E\x12" +
		"\x86\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\x8D\n\x13\f\x13\x0E\x13\x90" +
		"\v\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x06\x14\x97\n\x14\r\x14" +
		"\x0E\x14\x98\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x8E\x02" +
		"\x02\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02" +
		"\x16+\x02\x17\x03\x02\x06\x03\x022;\x03\x02c|\x06\x02//2;aac|\x04\x02" +
		"\v\v\"\"\x02\xA7\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x03" +
		"-\x03\x02\x02\x02\x051\x03\x02\x02\x02\x076\x03\x02\x02\x02\t;\x03\x02" +
		"\x02\x02\v>\x03\x02\x02\x02\rD\x03\x02\x02\x02\x0FK\x03\x02\x02\x02\x11" +
		"P\x03\x02\x02\x02\x13W\x03\x02\x02\x02\x15a\x03\x02\x02\x02\x17g\x03\x02" +
		"\x02\x02\x19m\x03\x02\x02\x02\x1Bo\x03\x02\x02\x02\x1Ds\x03\x02\x02\x02" +
		"\x1Fv\x03\x02\x02\x02!{\x03\x02\x02\x02#\x84\x03\x02\x02\x02%\x88\x03" +
		"\x02\x02\x02\'\x96\x03\x02\x02\x02)\x9A\x03\x02\x02\x02+\x9E\x03\x02\x02" +
		"\x02-.\x07c\x02\x02./\x07f\x02\x02/0\x07f\x02\x020\x04\x03\x02\x02\x02" +
		"12\x07e\x02\x0223\x07q\x02\x0234\x07r\x02\x0245\x07{\x02\x025\x06\x03" +
		"\x02\x02\x0267\x07o\x02\x0278\x07q\x02\x0289\x07x\x02\x029:\x07g\x02\x02" +
		":\b\x03\x02\x02\x02;<\x07v\x02\x02<=\x07q\x02\x02=\n\x03\x02\x02\x02>" +
		"?\x07k\x02\x02?@\x07p\x02\x02@A\x07r\x02\x02AB\x07w\x02\x02BC\x07v\x02" +
		"\x02C\f\x03\x02\x02\x02DE\x07q\x02\x02EF\x07w\x02\x02FG\x07v\x02\x02G" +
		"H\x07r\x02\x02HI\x07w\x02\x02IJ\x07v\x02\x02J\x0E\x03\x02\x02\x02KL\x07" +
		"n\x02\x02LM\x07q\x02\x02MN\x07q\x02\x02NO\x07r\x02\x02O\x10\x03\x02\x02" +
		"\x02PQ\x07k\x02\x02QR\x07h\x02\x02RS\x07|\x02\x02ST\x07g\x02\x02TU\x07" +
		"t\x02\x02UV\x07q\x02\x02V\x12\x03\x02\x02\x02WX\x07k\x02\x02XY\x07h\x02" +
		"\x02YZ\x07p\x02\x02Z[\x07q\x02\x02[\\\x07v\x02\x02\\]\x07|\x02\x02]^\x07" +
		"g\x02\x02^_\x07t\x02\x02_`\x07q\x02\x02`\x14\x03\x02\x02\x02ab\x07k\x02" +
		"\x02bc\x07h\x02\x02cd\x07r\x02\x02de\x07q\x02\x02ef\x07u\x02\x02f\x16" +
		"\x03\x02\x02\x02gh\x07k\x02\x02hi\x07h\x02\x02ij\x07p\x02\x02jk\x07g\x02" +
		"\x02kl\x07i\x02\x02l\x18\x03\x02\x02\x02mn\x07}\x02\x02n\x1A\x03\x02\x02" +
		"\x02op\x07\x7F\x02\x02p\x1C\x03\x02\x02\x02qt\x05\x1F\x10\x02rt\x05!\x11" +
		"\x02sq\x03\x02\x02\x02sr\x03\x02\x02\x02t\x1E\x03\x02\x02\x02uw\t\x02" +
		"\x02\x02vu\x03\x02\x02\x02wx\x03\x02\x02\x02xv\x03\x02\x02\x02xy\x03\x02" +
		"\x02\x02y \x03\x02\x02\x02z|\t\x03\x02\x02{z\x03\x02\x02\x02|}\x03\x02" +
		"\x02\x02}{\x03\x02\x02\x02}~\x03\x02\x02\x02~\"\x03\x02\x02\x02\x7F\x81" +
		"\x07\x0F\x02\x02\x80\x7F\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x82" +
		"\x03\x02\x02\x02\x82\x85\x07\f\x02\x02\x83\x85\x07\x0F\x02\x02\x84\x80" +
		"\x03\x02\x02\x02\x84\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x84" +
		"\x03\x02\x02\x02\x86\x87\x03\x02\x02\x02\x87$\x03\x02\x02\x02\x88\x89" +
		"\x071\x02\x02\x89\x8A\x071\x02\x02\x8A\x8E\x03\x02\x02\x02\x8B\x8D\v\x02" +
		"\x02\x02\x8C\x8B\x03\x02\x02\x02\x8D\x90\x03\x02\x02\x02\x8E\x8F\x03\x02" +
		"\x02\x02\x8E\x8C\x03\x02\x02\x02\x8F\x91\x03\x02\x02\x02\x90\x8E\x03\x02" +
		"\x02\x02\x91\x92\x05#\x12\x02\x92\x93\x03\x02\x02\x02\x93\x94\b\x13\x02" +
		"\x02\x94&\x03\x02\x02\x02\x95\x97\t\x04\x02\x02\x96\x95\x03\x02\x02\x02" +
		"\x97\x98\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02" +
		"\x99(\x03\x02\x02\x02\x9A\x9B\t\x05\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C" +
		"\x9D\b\x15\x02\x02\x9D*\x03\x02\x02\x02\x9E\x9F\v\x02\x02\x02\x9F,\x03" +
		"\x02\x02\x02\v\x02sx}\x80\x84\x86\x8E\x98\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ArisLexer.__ATN) {
			ArisLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ArisLexer._serializedATN));
		}

		return ArisLexer.__ATN;
	}

}


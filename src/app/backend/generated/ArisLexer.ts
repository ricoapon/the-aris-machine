// Generated from src/antlr4/Aris.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ArisLexer extends Lexer {
	public static readonly ADD = 1;
	public static readonly COPY = 2;
	public static readonly MOVE = 3;
	public static readonly TO = 4;
	public static readonly INPUT = 5;
	public static readonly OUTPUT = 6;
	public static readonly LOOP = 7;
	public static readonly CURLY_OPEN = 8;
	public static readonly CURLY_CLOSED = 9;
	public static readonly MEMORY_SLOT = 10;
	public static readonly MEMORY_SLOT_NUMBER = 11;
	public static readonly MEMORY_SLOT_NAME = 12;
	public static readonly NEWLINE = 13;
	public static readonly LINE_COMMENT = 14;
	public static readonly UNIDENTIFIED = 15;
	public static readonly WHITESPACE = 16;
	public static readonly ERROR_CHARACTER = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"ADD", "COPY", "MOVE", "TO", "INPUT", "OUTPUT", "LOOP", "CURLY_OPEN", 
		"CURLY_CLOSED", "MEMORY_SLOT", "MEMORY_SLOT_NUMBER", "MEMORY_SLOT_NAME", 
		"NEWLINE", "LINE_COMMENT", "UNIDENTIFIED", "WHITESPACE", "ERROR_CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'add'", "'copy'", "'move'", "'to'", "'input'", "'output'", 
		"'loop'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ADD", "COPY", "MOVE", "TO", "INPUT", "OUTPUT", "LOOP", "CURLY_OPEN", 
		"CURLY_CLOSED", "MEMORY_SLOT", "MEMORY_SLOT_NUMBER", "MEMORY_SLOT_NAME", 
		"NEWLINE", "LINE_COMMENT", "UNIDENTIFIED", "WHITESPACE", "ERROR_CHARACTER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ArisLexer._LITERAL_NAMES, ArisLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ArisLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ArisLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Aris.g4"; }

	// @Override
	public get ruleNames(): string[] { return ArisLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ArisLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ArisLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ArisLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13{\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\v\x03\v\x05\vO\n\v\x03\f\x06\fR\n\f\r\f\x0E\fS\x03\r\x06" +
		"\rW\n\r\r\r\x0E\rX\x03\x0E\x05\x0E\\\n\x0E\x03\x0E\x03\x0E\x06\x0E`\n" +
		"\x0E\r\x0E\x0E\x0Ea\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0Fh\n\x0F\f\x0F" +
		"\x0E\x0Fk\v\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x06\x10r\n\x10" +
		"\r\x10\x0E\x10s\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03i\x02" +
		"\x02\x13\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13\x03\x02\x06\x03\x022;\x03" +
		"\x02c|\x06\x02//2;aac|\x04\x02\v\v\"\"\x02\x82\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x05)\x03\x02\x02\x02\x07.\x03\x02" +
		"\x02\x02\t3\x03\x02\x02\x02\v6\x03\x02\x02\x02\r<\x03\x02\x02\x02\x0F" +
		"C\x03\x02\x02\x02\x11H\x03\x02\x02\x02\x13J\x03\x02\x02\x02\x15N\x03\x02" +
		"\x02\x02\x17Q\x03\x02\x02\x02\x19V\x03\x02\x02\x02\x1B_\x03\x02\x02\x02" +
		"\x1Dc\x03\x02\x02\x02\x1Fq\x03\x02\x02\x02!u\x03\x02\x02\x02#y\x03\x02" +
		"\x02\x02%&\x07c\x02\x02&\'\x07f\x02\x02\'(\x07f\x02\x02(\x04\x03\x02\x02" +
		"\x02)*\x07e\x02\x02*+\x07q\x02\x02+,\x07r\x02\x02,-\x07{\x02\x02-\x06" +
		"\x03\x02\x02\x02./\x07o\x02\x02/0\x07q\x02\x0201\x07x\x02\x0212\x07g\x02" +
		"\x022\b\x03\x02\x02\x0234\x07v\x02\x0245\x07q\x02\x025\n\x03\x02\x02\x02" +
		"67\x07k\x02\x0278\x07p\x02\x0289\x07r\x02\x029:\x07w\x02\x02:;\x07v\x02" +
		"\x02;\f\x03\x02\x02\x02<=\x07q\x02\x02=>\x07w\x02\x02>?\x07v\x02\x02?" +
		"@\x07r\x02\x02@A\x07w\x02\x02AB\x07v\x02\x02B\x0E\x03\x02\x02\x02CD\x07" +
		"n\x02\x02DE\x07q\x02\x02EF\x07q\x02\x02FG\x07r\x02\x02G\x10\x03\x02\x02" +
		"\x02HI\x07}\x02\x02I\x12\x03\x02\x02\x02JK\x07\x7F\x02\x02K\x14\x03\x02" +
		"\x02\x02LO\x05\x17\f\x02MO\x05\x19\r\x02NL\x03\x02\x02\x02NM\x03\x02\x02" +
		"\x02O\x16\x03\x02\x02\x02PR\t\x02\x02\x02QP\x03\x02\x02\x02RS\x03\x02" +
		"\x02\x02SQ\x03\x02\x02\x02ST\x03\x02\x02\x02T\x18\x03\x02\x02\x02UW\t" +
		"\x03\x02\x02VU\x03\x02\x02\x02WX\x03\x02\x02\x02XV\x03\x02\x02\x02XY\x03" +
		"\x02\x02\x02Y\x1A\x03\x02\x02\x02Z\\\x07\x0F\x02\x02[Z\x03\x02\x02\x02" +
		"[\\\x03\x02\x02\x02\\]\x03\x02\x02\x02]`\x07\f\x02\x02^`\x07\x0F\x02\x02" +
		"_[\x03\x02\x02\x02_^\x03\x02\x02\x02`a\x03\x02\x02\x02a_\x03\x02\x02\x02" +
		"ab\x03\x02\x02\x02b\x1C\x03\x02\x02\x02cd\x071\x02\x02de\x071\x02\x02" +
		"ei\x03\x02\x02\x02fh\v\x02\x02\x02gf\x03\x02\x02\x02hk\x03\x02\x02\x02" +
		"ij\x03\x02\x02\x02ig\x03\x02\x02\x02jl\x03\x02\x02\x02ki\x03\x02\x02\x02" +
		"lm\x05\x1B\x0E\x02mn\x03\x02\x02\x02no\b\x0F\x02\x02o\x1E\x03\x02\x02" +
		"\x02pr\t\x04\x02\x02qp\x03\x02\x02\x02rs\x03\x02\x02\x02sq\x03\x02\x02" +
		"\x02st\x03\x02\x02\x02t \x03\x02\x02\x02uv\t\x05\x02\x02vw\x03\x02\x02" +
		"\x02wx\b\x11\x02\x02x\"\x03\x02\x02\x02yz\v\x02\x02\x02z$\x03\x02\x02" +
		"\x02\v\x02NSX[_ais\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ArisLexer.__ATN) {
			ArisLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ArisLexer._serializedATN));
		}

		return ArisLexer.__ATN;
	}

}

